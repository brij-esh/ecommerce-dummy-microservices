package com.brijesh.orderService.service.serviceImpl;import com.brijesh.orderService.entity.OrderEntity;import com.brijesh.orderService.exception.CustomException;import com.brijesh.orderService.external.client.ProductServiceClient;import com.brijesh.orderService.external.response.ProductResponse;import com.brijesh.orderService.model.OrderRequest;import com.brijesh.orderService.model.OrderResponse;import com.brijesh.orderService.model.OrderStatus;import com.brijesh.orderService.repository.OrderRepository;import com.brijesh.orderService.service.OrderService;import lombok.extern.log4j.Log4j2;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.Instant;@Service@Log4j2public class OrderServiceImpl implements OrderService {    @Autowired    private OrderRepository orderRepository;    @Autowired    private ProductServiceClient productServiceClient;    @Override    public OrderResponse placeOrder(OrderRequest orderRequest) {        log.info("Placing order: {}", orderRequest);        ProductResponse productResponse = productServiceClient.getProductByIdClient(orderRequest.getProductId());        if (productResponse != null) {            productServiceClient.reduceQuantity(orderRequest.getProductId(), orderRequest.getQuantity());            log.info("Creating order: {}", orderRequest);            OrderEntity orderEntity = new OrderEntity();            BeanUtils.copyProperties(orderRequest, orderEntity);            orderEntity.setOrderDate(Instant.now());            orderEntity.setOrderStatus(OrderStatus.CREATED);            orderEntity.setTotalAmount(productResponse.getPrice()*orderRequest.getQuantity());            OrderEntity createdOrder = orderRepository.save(orderEntity);            OrderResponse orderResponse = new OrderResponse();            BeanUtils.copyProperties(createdOrder, orderResponse);            log.info("Order placed successfully: {}", orderResponse);            return orderResponse;        } else {            throw new CustomException("Internal server error", "SERVER_ERROR", 500);        }    }}