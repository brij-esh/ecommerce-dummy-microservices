package com.brijesh.ProductService.service.serviceImpl;import com.brijesh.ProductService.entity.Product;import com.brijesh.ProductService.exception.ProductServiceException;import com.brijesh.ProductService.model.ProductRequest;import com.brijesh.ProductService.model.ProductResponse;import com.brijesh.ProductService.repository.ProductRepository;import com.brijesh.ProductService.service.ProductService;import lombok.extern.log4j.Log4j2;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Service@Log4j2public class ProductServiceImpl implements ProductService {    @Autowired    private ProductRepository productRepository;    @Override    public long createProduct(ProductRequest productRequest) {        log.info("Creating prudct: {}", productRequest);        Product product = new Product();        BeanUtils.copyProperties(productRequest, product);        productRepository.save(product);        log.info("Successfully created: {}", product);        return product.getId();    }    @Override    public ProductResponse getProductById(long productId){        ProductResponse productResponse = new ProductResponse();        Product product = productRepository.findById(productId)                .orElseThrow(() -> new ProductServiceException("No product exist with Id: "+productId, "PRODUCT_NOT_FOUND"));        BeanUtils.copyProperties(product, productResponse);        log.info("Product found with Id: " + productId);        return productResponse;    }    @Override    public void reduceQuantity(long id, long quantity) {        log.info("Reduce Quantity {} for Id {}", id, quantity);        Product product = productRepository.findById(id)                .orElseThrow(()-> new ProductServiceException("No product found with id"+id, "PRODUCT_NOT_EXIST"));        if(product.getQuantity()<quantity){            throw new ProductServiceException("Product does not have sufficient quantity", "INSUFFICIENT_QUANTITY");        }        product.setQuantity(product.getQuantity()-quantity);        productRepository.save(product);        log.info("Reduced Quantity {} for Id {}", id, quantity);    }}